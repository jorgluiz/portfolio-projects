import { useState } from "react";
import Main from "@/components/layout/main";
import SideBar from "@/components/layout/sideBar";
import Header from "@/components/layout/header";
import Head from "next/head";
import { ContainerLayout } from "@/components/projetos/layout";

import { Container, P, H3, Li, Ul, H4, A } from "@/components/projetos/streamDolby/styles";

const Stripe = () => {
  const [isHamburguerOpen, setIsHamburguerOpen] = useState(false);
  const [isToggleOpen01, setIsToggleOpen01] = useState(false);

  return (
    <>
      <Head>
        {/* <!-- Primary Meta Tags --> */}
        <title>Plataforma de Transmiss√£o ao Vivo com Millicast, Firebase e GraphQL ‚Äì Controle e Monitoramento de Streams</title>
        <meta name="title" content="Plataforma de Transmiss√£o ao Vivo com Millicast, Firebase e GraphQL ‚Äì Controle e Monitoramento de Streams" />
        <meta name="description" content="Ol√°! Eu sou Jorge Luiz, desenvolvedor web especializado em frontend com ReactJS, NextJS e backend com Node.js. Explore meus projetos de sites modernos e aplica√ß√µes robustas." />

        {/* <!-- Open Graph / Facebook --> */}
        <meta property="og:site_name" content="https://portfolio-projects-production.up.railway.app" />
        <meta property="og:type" content="website" />
        <meta property="og:url" content="https://portfolio-projects-production.up.railway.app/projetos/streamDolby" />
        <meta property="og:title" content="Plataforma de Transmiss√£o ao Vivo com Millicast, Firebase e GraphQL ‚Äì Controle e Monitoramento de Streams" />
        <meta property="og:description" content="Conhe√ßa meu portf√≥lio de projetos de desenvolvimento web! Trabalho com tecnologias como ReactJS, NextJS, Node.js e muito mais." />
        <meta property="og:image" content="https://portfolio-projects-production.up.railway.app/stream.jpg" />

        {/* <!-- Twitter --> */}
        <meta property="twitter:card" content="summary_large_image" />
        <meta property="twitter:url" content="https://portfolio-projects-production.up.railway.app/projetos/streamDolby" />
        <meta property="twitter:title" content="Plataforma de Transmiss√£o ao Vivo com Millicast, Firebase e GraphQL ‚Äì Controle e Monitoramento de Streams" />
        <meta property="twitter:description" content="Ol√°! Eu sou Jorge Luiz, desenvolvedor web especializado em frontend com ReactJS, NextJS e backend com Node.js. Explore meus projetos de sites modernos e aplica√ß√µes robustas." />
        <meta property="twitter:image" content="https://portfolio-projects-production.up.railway.app/stream.jpg" />
      </Head>
      <ContainerLayout>
        <SideBar isHamburguerOpen={isHamburguerOpen} setIsHamburguerOpen={setIsHamburguerOpen}></SideBar>
        <Header isHamburguerOpen={isHamburguerOpen} setIsHamburguerOpen={setIsHamburguerOpen}></Header>
        <Main>
          <Container>
            <H3 className="player-video-personalizado onClickH3" onClick={() => isToggleOpen01 ? setIsToggleOpen01(false) : setIsToggleOpen01(true)}>Projeto: Sistema de Controle e Visualiza√ß√£o de Transmiss√µes ao Vivo - <span style={{ color: "blue" }}>Clique para ver mais</span>!</H3>
            <P>
              <a style={{ fontSize: "24px", fontWeight: "800" }} href="" target="_blank">üåé Link do Projeto</a>
            </P>
            {isToggleOpen01 && (
              <>

                <H3>Vis√£o Geral</H3>
                <P>Este projeto foi desenvolvido para gerenciar e visualizar transmiss√µes ao vivo de maneira din√¢mica. Ele permite ao usu√°rio iniciar, parar, visualizar e monitorar m√∫ltiplas transmiss√µes em tempo real atrav√©s de uma interface web amig√°vel. Utilizando tecnologias como Millicast para streaming e Firebase para persist√™ncia de dados, o sistema √© escal√°vel e configur√°vel, atendendo a diferentes necessidades de transmiss√£o ao vivo.</P>
                <H3>Funcionalidades</H3>
                <Ul>
                  <Li><strong>Controle de Transmiss√£o: </strong> Cria√ß√£o e encerramento de transmiss√µes ao vivo com gerenciamento completo de tokens para seguran√ßa.</Li>
                  <Li><strong>Visualiza√ß√£o em Tempo Real: </strong> Integra√ß√£o de uma interface de visualiza√ß√£o ao vivo, onde espectadores podem acessar transmiss√µes espec√≠ficas usando URLs configur√°veis.</Li>
                  <Li><strong>Armazenamento e Recupera√ß√£o de Dados: </strong> Persiste informa√ß√µes da transmiss√£o, como nome do stream e tokens, usando Firebase.</Li>
                  <Li><strong>Gest√£o de Tokens: </strong> Gera√ß√£o din√¢mica de tokens para usu√°rios espec√≠ficos, permitindo controle de acesso a cada transmiss√£o.</Li>
                  <Li><strong>Monitoramento de Status: </strong> Utiliza√ß√£o de uma API GraphQL para monitorar e listar o status de transmiss√µes, como {'"ativa"'} e {'"finalizada"'}.</Li>
                </Ul>
                <P><strong>Tecnologias Utilizadas</strong></P>
                <H3>Backend</H3>
                <Ul>
                  <Li><strong>Node.js e Express:</strong> Estrutura principal do servidor e gerenciamento de rotas.</Li>
                  <Li><strong>Firebase:</strong> Persist√™ncia de dados para salvar informa√ß√µes de streams e tokens.</Li>
                  <Li><strong>Millicast API:</strong> Gerenciamento de transmiss√£o ao vivo com cria√ß√£o de tokens e controle de transmiss√µes.</Li>
                </Ul>
                <H3>Frontend</H3>
                <Ul>
                  <Li><strong>EJS:</strong> Motor de templates para renderiza√ß√£o de p√°ginas din√¢micas no servidor.</Li>
                  <Li><strong>HTML/CSS:</strong> Estrutura e estiliza√ß√£o das p√°ginas de controle e visualiza√ß√£o.</Li>
                </Ul>
                <H3>Outras Tecnologias:</H3>
                <Ul>
                  <Li><strong>GraphQL:</strong> API para obter e monitorar dados em tempo real de transmiss√µes.</Li>
                  <Li><strong>dotenv:</strong> Gerenciamento de vari√°veis de ambiente para manter chaves seguras.</Li>
                  <Li><strong>axios e https:</strong> Clientes HTTP para realizar requisi√ß√µes √†s APIs externas.</Li>
                  <Li><strong>open:</strong> API para obter e monitorar dados em tempo real de transmiss√µes.</Li>
                </Ul>
                <H3>Principais Bibliotecas e Depend√™ncias</H3>
                <Ul>
                  <Li><strong>dotenv:</strong> Para configura√ß√£o de vari√°veis de ambiente, mantendo chaves sens√≠veis fora do c√≥digo-fonte.</Li>
                  <Li><strong>express:</strong> Framework web para facilitar o gerenciamento do servidor.</Li>
                  <Li><strong>body-parser:</strong> Analisa dados de requisi√ß√µes HTTP em JSON e URL-encoded.</Li>
                  <Li><strong>axios:</strong> Cliente HTTP para requisi√ß√µes mais complexas e f√°ceis de configurar.</Li>
                  <Li><strong>cors:</strong> Permite controle de acesso entre diferentes dom√≠nios (cross-origin requests).</Li>
                  <Li><strong>firebase:</strong> Biblioteca para conectar e manipular dados no Firebase.</Li>
                  <Li><strong>graphql-request:</strong> Cliente para realizar requisi√ß√µes GraphQL de forma simples.</Li>
                </Ul>
                <H3>Considera√ß√µes Finais</H3>
                <P>Este projeto √© um sistema robusto para o controle de transmiss√µes ao vivo, implementado com boas pr√°ticas de seguran√ßa e gerenciamento de dados. As integra√ß√µes com APIs e o uso de GraphQL trazem flexibilidade para monitoramento, enquanto Firebase e Millicast facilitam o armazenamento e controle das transmiss√µes. Este √© um exemplo s√≥lido de um sistema backend voltado para escalabilidade e modularidade, ideal para plataformas que demandam uma estrutura s√≥lida e integra√ß√£o de dados em tempo real.</P>
              </>
            )}
          </Container>
        </Main>
      </ContainerLayout>
    </>
  );
};

export default Stripe;