import { useState } from "react";
import Main from "@/components/layout/main";
import SideBar from "@/components/layout/sideBar";
import Header from "@/components/layout/header";
import Head from "next/head";

import { Container, P, H3, Li, Ul, H4, A } from "@/components/projetos/ytformp4/styles";

const Ytformp4 = () => {
  const [isHamburguerOpen, setIsHamburguerOpen] = useState(false);
  const [isToggleOpen01, setIsToggleOpen01] = useState(false);

  return (
    <>
      <Head>
        {/* <!-- Primary Meta Tags --> */}
        <title>Jorge Luiz | Portf√≥lio de Desenvolvimento Web | Frontend e Backend</title>
        <meta name="title" content="Jorge Luiz | Portf√≥lio de Desenvolvimento Web | Frontend e Backend" />
        <meta name="description" content="Ol√°! Eu sou Jorge Luiz, desenvolvedor web especializado em frontend com ReactJS, NextJS e backend com Node.js. Explore meus projetos de sites modernos e aplica√ß√µes robustas." />

        {/* <!-- Open Graph / Facebook --> */}
        <meta property="og:site_name" content="https://portfolio-projects-production.up.railway.app" />
        <meta property="og:type" content="website" />
        <meta property="og:url" content="https://portfolio-projects-production.up.railway.app/projetos/ytformp4" />
        <meta property="og:title" content="Jorge Luiz | Portf√≥lio de Desenvolvimento Web | Frontend e Backend" />
        <meta property="og:description" content="Conhe√ßa meu portf√≥lio de projetos de desenvolvimento web! Trabalho com tecnologias como ReactJS, NextJS, Node.js e muito mais." />
        <meta property="og:image" content="https://portfolio-projects-production.up.railway.app/ytmp4.jpg" />

        {/* <!-- Twitter --> */}
        <meta property="twitter:card" content="summary_large_image" />
        <meta property="twitter:url" content="https://portfolio-projects-production.up.railway.app/projetos/ytformp4" />
        <meta property="twitter:title" content="Jorge Luiz | Portf√≥lio de Desenvolvimento Web | Frontend e Backend" />
        <meta property="twitter:description" content="Ol√°! Eu sou Jorge Luiz, desenvolvedor web especializado em frontend com ReactJS, NextJS e backend com Node.js. Explore meus projetos de sites modernos e aplica√ß√µes robustas." />
        <meta property="twitter:image" content="https://portfolio-projects-production.up.railway.app/ytmp4.jpg" />
      </Head>
      <div style={{ display: "flex" }}>
        <SideBar isHamburguerOpen={isHamburguerOpen} setIsHamburguerOpen={setIsHamburguerOpen}></SideBar>
        <Main>
          <Header isHamburguerOpen={isHamburguerOpen} setIsHamburguerOpen={setIsHamburguerOpen}></Header>
          <Container>
            <H3 className="player-video-personalizado onClickH3" onClick={() => isToggleOpen01 ? setIsToggleOpen01(false) : setIsToggleOpen01(true)}>üé• Descubra o Projeto: Download de V√≠deo do YouTube - Clique para ver mais!</H3>
            <P>
              <a href="https://yt-download-mp3-frontend-d80c3323b80c.herokuapp.com" target="_blank">direcionar para p√°gina</a>
            </P>
            <H3>Observa√ß√£o importante: para ter acesso backend, precisa ativar ngrok localmente!</H3>
            {isToggleOpen01 && (
              <>
                <div>
                  <H4>üìÑ Resumo para o Portf√≥lio</H4>
                  <P>Este projeto √© uma aplica√ß√£o <strong>full-stack</strong> que permite baixar e combinar v√≠deos e √°udios do YouTube com as seguintes funcionalidades:</P>
                  <Ul>
                    <Li><strong>Recupera√ß√£o de metadados:</strong> T√≠tulo, formatos dispon√≠veis e thumbnail de um v√≠deo do YouTube.</Li>
                    <Li><strong>Processamento de m√≠dia:</strong> Combina√ß√£o de v√≠deo e √°udio com qualidade configur√°vel usando ffmpeg.</Li>
                    <Li><strong>Comunica√ß√£o em tempo real:</strong> Progresso do processamento √© exibido dinamicamente via Socket.IO.</Li>
                  </Ul>
                  <P><strong>Tecnologias utilizadas:</strong></P>
                  <Ul>
                    <Li><strong>Backend:</strong> Node.js, Express, ytdl-core, fluent-ffmpeg, Socket.IO</Li>
                    <Li><strong>Frontend:</strong> HTML, CSS e Socket.IO</Li>
                    <Li><strong>Outras ferramentas:</strong> uuid, cors, fs.</Li>
                  </Ul>
                  <P><strong>Diferenciais t√©cnicos:</strong></P>
                  <Ul>
                    <Li>Gera√ß√£o de arquivos de m√≠dia em tempo real.</Li>
                    <Li>Uso de arquivos bin√°rios do ffmpeg para maior controle.</Li>
                    <Li>Suporte a m√∫ltiplas origens (CORS configur√°vel).</Li>
                  </Ul>
                  <P>Esse projeto pode ser expandido para incluir suporte a m√∫ltiplos downloads simult√¢neos com filas, personaliza√ß√£o da interface e integra√ß√£o com servi√ßos de armazenamento em nuvem como AWS S3.</P>
                  <h1>1. Estrutura do Backend</h1>
                  <P><strong>Principais funcionalidades implementadas</strong></P>
                  <Ul>
                    <Li><strong>yt-video-formats:</strong> Respons√°vel por receber uma URL de v√≠deo do YouTube e retornar</Li>
                    <Li style={{ marginLeft: "10px" }}>Respons√°vel por receber uma URL de v√≠deo do YouTube e retornar:</Li>
                    <Li style={{ marginLeft: "30px" }}>Formatos de v√≠deo dispon√≠veis (resolvidos para qualidades √∫nicas, exceto 1080p).</Li>
                    <Li style={{ marginLeft: "30px" }}>Thumbnail do v√≠deo (melhor qualidade dispon√≠vel).</Li>
                    <Li style={{ marginLeft: "30px" }}>T√≠tulo do v√≠deo sanitizado (removendo caracteres especiais).</Li>
                    <Li style={{ marginLeft: "10px" }}>Utiliza <strong style={{ backgroundColor: "#CECECE" }}>ytdl-core.</strong> para valida√ß√£o e recupera√ß√£o de informa√ß√µes do v√≠deo.</Li>
                    <Li><strong>yt-download:</strong></Li>
                    <Li style={{ marginLeft: "10px" }}>Combina duas etapas principais:</Li>
                    <Li style={{ marginLeft: "30px" }}>1. <strong style={{ backgroundColor: "#CECECE" }}>ytVideoAduioDownload:</strong></Li>
                    <Li style={{ marginLeft: "40px" }}>Baixa o v√≠deo e o √°udio em formatos separados usando <strong style={{ backgroundColor: "#CECECE" }}>ytdl-core.</strong></Li>
                    <Li style={{ marginLeft: "40px" }}>Garante que apenas uma requisi√ß√£o de download √© processada por vez (<strong style={{ backgroundColor: "#CECECE" }}>isProcessing</strong>).</Li>
                    <Li style={{ marginLeft: "40px" }}>Salva os arquivos localmente em formato bin√°rio.</Li>
                    <Li style={{ marginLeft: "30px" }}>2. <strong style={{ backgroundColor: "#CECECE" }}>toCombineVideoAudio:</strong></Li>
                    <Li style={{ marginLeft: "40px" }}>Utiliza ffmpeg para combinar v√≠deo e √°udio.</Li>
                    <Li style={{ marginLeft: "40px" }}>Envia o arquivo combinado ao cliente e remove os arquivos tempor√°rios.</Li>
                    <Li style={{ marginLeft: "40px" }}>Emite eventos de progresso para o cliente via Socket.IO.</Li>
                  </Ul>
                  <H4>Tecnologias e bibliotecas</H4>
                  <Ul>
                    <Li><strong style={{ backgroundColor: "#CECECE" }}>ytdl-core:</strong></Li>
                    <Li style={{ marginLeft: "30px" }}>Para obter metadados e fazer download de v√≠deos do YouTube.</Li>
                    <Li style={{ marginLeft: "30px" }}>√â necess√°rio baixar os v√≠deos como bin√°rios para processamento posterior.</Li>
                    <Li><strong style={{ backgroundColor: "#CECECE" }}>fluent-ffmpeg:</strong></Li>
                    <Li style={{ marginLeft: "30px" }}>Integra <strong style={{ backgroundColor: "#CECECE" }}>ffmpeg</strong> ao Node.js, necess√°rio para manipula√ß√£o de v√≠deo e √°udio.</Li>
                    <Li style={{ marginLeft: "30px" }}>o <strong style={{ backgroundColor: "#CECECE" }}>ffmpeg</strong> foi configurado com o caminho bin√°rio manualmente:</Li>
                    <Li>ffmpeg.<span style={{ color: "#4078f2", fontWeight: "700" }}>setFfmpegPath</span>(path.<span style={{ color: "#4078f2", fontWeight: "700" }}>resolve</span><span style={{ color: "#50a14f", fontWeight: "700" }}>("C:\\Users\\Dev\\Desktop\\ffmpeg-master-latest-win64-gpl-shared\\bin\\ffmpeg.exe"));</span></Li>
                    <Li style={{ marginLeft: "30px", listStyle: "none" }}>Essa configura√ß√£o foi essencial, pois ffmpeg n√£o √© instalado globalmente no sistema, sendo usado de um diret√≥rio local.</Li>
                    <Li><strong style={{ backgroundColor: "#CECECE" }}>Socket.IO:</strong></Li>
                    <Li style={{ marginLeft: "30px" }}>Para comunica√ß√£o em tempo real entre o cliente e o servidor.</Li>
                    <Li style={{ marginLeft: "30px" }}>Utilizado para enviar atualiza√ß√µes do progresso do processamento.</Li>
                  </Ul>
                  <H4>Pontos positivos</H4>
                  <Ul>
                    <Li style={{ marginLeft: "30px" }}>O uso do isProcessing para evitar requisi√ß√µes simult√¢neas garante que o servidor n√£o enfrente conflitos ao manipular arquivos tempor√°rios.</Li>
                    <Li style={{ marginLeft: "30px" }}>O tratamento de erros √© robusto, com respostas adequadas para URLs inv√°lidas, aus√™ncia de formatos ou falhas no processamento.</Li>
                    <Li style={{ marginLeft: "30px" }}>A remo√ß√£o de arquivos tempor√°rios ao final do processamento impede o consumo desnecess√°rio de espa√ßo em disco.</Li>
                  </Ul>
                  <h1>2. Estrutura do Frontend</h1>
                  <P><strong>Carregamento com Feedback Visual</strong></P>
                  <Ul>
                    <Li>A anima√ß√£o de carregamento (#loadingContainer) fornece uma experi√™ncia de usu√°rio fluida durante o processamento de v√≠deos.</Li>
                    <Li><strong>Caracter√≠sticas:</strong></Li>
                    <Li style={{ marginLeft: "30px" }}>Utiliza um c√≠rculo animado com transi√ß√£o de opacidade, o que torna a anima√ß√£o visualmente agrad√°vel.</Li>
                    <Li style={{ marginLeft: "30px" }}>Oculta o elemento carregador inicialmente com display: none.</Li>
                  </Ul>
                  <h1>3. Considera√ß√µes sobre o Projeto</h1><br />
                  <H3><strong>Pontos fortes</strong></H3>
                  <Ul>
                    <Li><strong>Automatiza√ß√£o de tarefas complexas:</strong></Li>
                    <Li style={{ marginLeft: "30px" }}>A combina√ß√£o de v√≠deo e √°udio usando ffmpeg √© eficiente, permitindo resultados de alta qualidade.</Li>
                    <Li><strong>Uso de tecnologias modernas:</strong></Li>
                    <Li style={{ marginLeft: "30px" }}>Integra√ß√£o com Socket.IO oferece uma experi√™ncia interativa em tempo real.</Li>
                    <Li><strong>Desempenho:</strong></Li>
                    <Li style={{ marginLeft: "30px" }}>A configura√ß√£o de <span style={{ color: "#4078f2", fontWeight: "700" }}>isProcessing</span> evita sobrecarga e garante o funcionamento est√°vel do servidor.</Li>
                  </Ul>
                  <H4>Poss√≠veis desafios</H4>
                  <Ul>
                    <Li><strong>Limita√ß√µes de desempenho em larga escala:</strong></Li>
                    <Li style={{ marginLeft: "30px" }}> <span style={{ color: "red", fontWeight: "700" }}>Downloads simult√¢neos podem saturar o servidor.</span> Solu√ß√£o: Implementar filas de processamento (ex.: <span style={{ color: "#4078f2", fontWeight: "700" }}>bull</span> ou <span style={{ color: "#4078f2", fontWeight: "700" }}>kue</span>).</Li>
                    <Li><strong>Configura√ß√£o do ffmpeg:</strong></Li>
                    <Li style={{ marginLeft: "30px" }}>O uso do caminho bin√°rio √© necess√°rio, mas pode ser um desafio em ambientes diferentes (ex.: Linux ou Docker). Uma alternativa seria incluir o bin√°rio diretamente no projeto e configur√°-lo dinamicamente.</Li>
                  </Ul>
                  <P><strong>üöÄ Projeto de Download de √Åudio e V√≠deo do YouTube com Frontend e Backend Integrados
                    Desenvolvi um projeto de download de v√≠deo do YouTube utilizando YTDL-Core. Inicialmente, hospedei tanto o frontend quanto o backend no Heroku, mas enfrentei um grande desafio:
                    üî¥ Erro ao baixar o √°udio: "UnrecoverableError: Sign in to confirm you‚Äôre not a bot" ‚Äì mesmo com cookies, o download n√£o funcionava.</strong></P>
                  <P><strong>üí° Solu√ß√£o:
                    Decidi dividir a aplica√ß√£o. O frontend permaneceu no Heroku, e o backend foi executado localmente, utilizando o Ngrok para criar um t√∫nel reverso, permitindo que o frontend acessasse o backend via internet.</strong></P>
                  <P><strong>‚úÖ Resultado:
                    O problema foi solucionado, e agora consigo realizar downloads de √°udio de qualquer v√≠deo, independentemente do tamanho.</strong></P>
                  <P><strong>‚ö†Ô∏è Limita√ß√£o: A vers√£o gratuita do Ngrok oferece um limite de 1TB de transfer√™ncia de dados.

                    Este projeto me desafiou a encontrar alternativas para contornar restri√ß√µes de servidores e autentica√ß√µes, ampliando minha experi√™ncia em deploy e solu√ß√µes criativas em ambientes de hospedagem.</strong></P>
                </div>
              </>
            )}
          </Container>
        </Main>
      </div>
    </>
  );
};

export default Ytformp4;