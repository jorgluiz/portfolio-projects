import { useState } from "react";
import Main from "@/components/layout/main";
import SideBar from "@/components/layout/sideBar";
import Header from "@/components/layout/header";

import { Container, P, H3, Li, Ul, H4, A } from "@/components/projetos/ytformp3/styles";

const Ytformp3 = () => {
  const [isHamburguerOpen, setIsHamburguerOpen] = useState(false);
  const [isToggleOpen01, setIsToggleOpen01] = useState(false);

  return (
    <div style={{ display: "flex" }}>
      <SideBar isHamburguerOpen={isHamburguerOpen} setIsHamburguerOpen={setIsHamburguerOpen}></SideBar>
      <Main>
        <Header isHamburguerOpen={isHamburguerOpen} setIsHamburguerOpen={setIsHamburguerOpen}></Header>
        <Container>
          <H3 className="player-video-personalizado onClickH3" onClick={() => isToggleOpen01 ? setIsToggleOpen01(false) : setIsToggleOpen01(true)}>üé• Descubra o Projeto: Download de √Åudio do YouTube - Clique para ver mais!</H3>
          <P>
            <a href="https://yt-download-mp3-frontend-d80c3323b80c.herokuapp.com" target="_blank">direcionar para p√°gina</a>
          </P>
          <H3>Observa√ß√£o importante: para ter acesso backend, precisa ativar ngrok localmente!</H3>
          {isToggleOpen01 && (
            <>
              <div>
                <H4>üìÑ Descri√ß√£o do Projeto</H4>
                <P>Este projeto √© uma aplica√ß√£o backend desenvolvida com Node.js e Express, que permite aos usu√°rios baixar o √°udio de v√≠deos do YouTube no formato MP3. Ele √© projetado para oferecer uma experi√™ncia r√°pida e amig√°vel, com suporte a metadados como t√≠tulo e thumbnail do v√≠deo.</P>
                <H4>üõ†Ô∏è Tecnologias Utilizadas</H4>
                <P><strong>Frontend:</strong></P>
                <Ul>
                  <Li><strong>Download de √Åudio:</strong> Transforma v√≠deos do YouTube em arquivos MP3 prontos para download.</Li>
                  <Li><strong>Metadados Inclu√≠dos:</strong> O t√≠tulo do v√≠deo e a imagem da thumbnail s√£o incorporados como cabe√ßalhos personalizados na resposta.</Li>
                  <Li><strong>Valida√ß√£o de URL:</strong> Verifica se a URL fornecida √© v√°lida antes de iniciar o download.</Li>
                  <Li><strong>Filtro de Qualidade:</strong> Seleciona automaticamente o melhor formato de √°udio dispon√≠vel.</Li>
                  <Li><strong>Suporte a Cookies:</strong> Utiliza cookies armazenados localmente para acessar conte√∫dos restritos, se necess√°rio.</Li>
                  <Li><strong>Interface de Carregamento:</strong> Um c√≠rculo animado √© exibido para indicar o progresso do download.</Li>
                </Ul>
                <H4>üíª Tecnologias Utilizadas</H4>
                <P><strong>Backend:</strong></P>
                <Ul>
                  <Li><strong>Node.js:</strong> Ambiente de execu√ß√£o para JavaScript no servidor.</Li>
                  <Li><strong>Express:</strong> Framework para cria√ß√£o de APIs robustas e flex√≠veis.</Li>
                  <Li><strong>@distube/ytdl-core:</strong> Biblioteca para manipula√ß√£o e extra√ß√£o de v√≠deos do YouTube.</Li>
                </Ul>
                <H4>Configura√ß√£o e Utilit√°rios:</H4>
                <Ul>
                  <Li><strong>dotenv</strong> Gerenciamento de vari√°veis de ambiente.</Li>
                  <Li><strong>fs:</strong> Manipula√ß√£o de arquivos locais.</Li>
                  <Li><strong>CORS:</strong> Controle de acesso para origens externas.</Li>
                </Ul>
                <H4>Estiliza√ß√£o:</H4>
                <Ul>
                  <Li><strong>HTML e CSS:</strong> Utilizados para criar uma interface simples e responsiva.</Li>
                </Ul>
                <P><strong>üöÄ Projeto de Download de √Åudio do YouTube com Frontend e Backend Integrados
                  Desenvolvi um projeto de download de √°udio do YouTube utilizando YTDL-Core. Inicialmente, hospedei tanto o frontend quanto o backend no Heroku, mas enfrentei um grande desafio:
                  üî¥ Erro ao baixar o √°udio: "UnrecoverableError: Sign in to confirm you‚Äôre not a bot" ‚Äì mesmo com cookies, o download n√£o funcionava.</strong></P>
                <P><strong>üí° Solu√ß√£o:
                  Decidi dividir a aplica√ß√£o. O frontend permaneceu no Heroku, e o backend foi executado localmente, utilizando o Ngrok para criar um t√∫nel reverso, permitindo que o frontend acessasse o backend via internet.</strong></P>
                <P><strong>‚úÖ Resultado:
                  O problema foi solucionado, e agora consigo realizar downloads de √°udio de qualquer v√≠deo, independentemente do tamanho.</strong></P>
                <P><strong>‚ö†Ô∏è Limita√ß√£o: A vers√£o gratuita do Ngrok oferece um limite de 1TB de transfer√™ncia de dados.

                  Este projeto me desafiou a encontrar alternativas para contornar restri√ß√µes de servidores e autentica√ß√µes, ampliando minha experi√™ncia em deploy e solu√ß√µes criativas em ambientes de hospedagem.</strong></P>
              </div>
            </>
          )}
        </Container>
      </Main>
    </div>
  );
};

export default Ytformp3;