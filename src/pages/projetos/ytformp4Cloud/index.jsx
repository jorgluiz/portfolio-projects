import { useState } from "react";
import Main from "@/components/layout/main";
import SideBar from "@/components/layout/sideBar";
import Header from "@/components/layout/header";
import Head from "next/head";

import { Container, P, H3, Li, Ul, H4, A } from "@/components/projetos/ytformp4/styles";

const Ytformp4 = () => {
  const [isHamburguerOpen, setIsHamburguerOpen] = useState(false);
  const [isToggleOpen01, setIsToggleOpen01] = useState(false);

  return (
    <>
      <Head>
        {/* <!-- Primary Meta Tags --> */}
        <title>Jorge Luiz | Portf√≥lio de Desenvolvimento Web | Frontend e Backend</title>
        <meta name="title" content="Jorge Luiz | Portf√≥lio de Desenvolvimento Web | Frontend e Backend" />
        <meta name="description" content="Ol√°! Eu sou Jorge Luiz, desenvolvedor web especializado em frontend com ReactJS, NextJS e backend com Node.js. Explore meus projetos de sites modernos e aplica√ß√µes robustas." />

        {/* <!-- Open Graph / Facebook --> */}
        <meta property="og:site_name" content="https://portfolio-projects-production.up.railway.app" />
        <meta property="og:type" content="website" />
        <meta property="og:url" content="https://portfolio-projects-production.up.railway.app/projetos/ytformp4" />
        <meta property="og:title" content="Jorge Luiz | Portf√≥lio de Desenvolvimento Web | Frontend e Backend" />
        <meta property="og:description" content="Conhe√ßa meu portf√≥lio de projetos de desenvolvimento web! Trabalho com tecnologias como ReactJS, NextJS, Node.js e muito mais." />
        <meta property="og:image" content="https://portfolio-projects-production.up.railway.app/ytmp4.jpg" />

        {/* <!-- Twitter --> */}
        <meta property="twitter:card" content="summary_large_image" />
        <meta property="twitter:url" content="https://portfolio-projects-production.up.railway.app/projetos/ytformp4" />
        <meta property="twitter:title" content="Jorge Luiz | Portf√≥lio de Desenvolvimento Web | Frontend e Backend" />
        <meta property="twitter:description" content="Ol√°! Eu sou Jorge Luiz, desenvolvedor web especializado em frontend com ReactJS, NextJS e backend com Node.js. Explore meus projetos de sites modernos e aplica√ß√µes robustas." />
        <meta property="twitter:image" content="https://portfolio-projects-production.up.railway.app/ytmp4.jpg" />
      </Head>
      <div style={{ display: "flex" }}>
        <SideBar isHamburguerOpen={isHamburguerOpen} setIsHamburguerOpen={setIsHamburguerOpen}></SideBar>
        <Main>
          <Header isHamburguerOpen={isHamburguerOpen} setIsHamburguerOpen={setIsHamburguerOpen}></Header>
          <Container>
            <H3 className="player-video-personalizado onClickH3" onClick={() => isToggleOpen01 ? setIsToggleOpen01(false) : setIsToggleOpen01(true)}>üé• Descubra o Projeto: Download de V√≠deo do YouTube - Clique para ver mais!</H3>
            <P>
              <a href="https://yt-download-mp3-frontend-d80c3323b80c.herokuapp.com" target="_blank">direcionar para p√°gina</a>
            </P>
            {isToggleOpen01 && (
              <>
                <div>
                  <H4>1. Resumo do Projeto</H4>
                  <P>Este projeto √© uma aplica√ß√£o backend que oferece funcionalidade de download e combina√ß√£o de v√≠deos e √°udios do YouTube. Ele utiliza tecnologias como Express.js, Socket.io, FFmpeg e bibliotecas espec√≠ficas para intera√ß√£o com v√≠deos do YouTube, permitindo que os usu√°rios escolham a qualidade desejada, fa√ßam o download e combinem √°udio e v√≠deo em um arquivo MP4 final.</P>
                  <Ul>
                    <Li><strong>2. Funcionalidades Principais</strong></Li>
                    <Li style={{ marginLeft: "10px" }}>Uso do <strong>youtube-dl-exec</strong> para baixar √°udio e v√≠deo com base no formato escolhido.</Li>
                    <Li style={{ marginLeft: "10px" }}>Gerenciamento de erros e valida√ß√£o de URLs do YouTube.</Li>
                  </Ul>
                  <Ul>
                    <Li><strong>Combina√ß√£o de √Åudio e V√≠deo:</strong></Li>
                    <Li style={{ marginLeft: "10px" }}>Integra√ß√£o com FFmpeg para combinar os arquivos baixados em um √∫nico arquivo MP4.</Li>
                    <Li style={{ marginLeft: "10px" }}>Configura√ß√£o de presets r√°pidos para otimizar o processamento.</Li>
                  </Ul>
                  <Ul>
                    <Li><strong>Feedback em Tempo Real:</strong></Li>
                    <Li style={{ marginLeft: "10px" }}>Utiliza√ß√£o de Socket.io para fornecer atualiza√ß√µes de progresso do processo ao cliente em tempo real.</Li>
                  </Ul>
                  <Ul>
                    <Li><strong>Gerenciamento de Arquivos Tempor√°rios:</strong></Li>
                    <Li style={{ marginLeft: "10px" }}>Armazenamento de arquivos em diret√≥rios tempor√°rios e exclus√£o ap√≥s o download.</Li>
                  </Ul>
                  <Ul>
                    <Li><strong>Controle de Concorr√™ncia:</strong></Li>
                    <Li style={{ marginLeft: "10px" }}>Uso de um controle de estado <strong>(isProcessing)</strong> para evitar m√∫ltiplas requisi√ß√µes simult√¢neas e garantir que apenas uma opera√ß√£o seja processada por vez.</Li>
                  </Ul>
                  <H4>3. Tecnologias e Ferramentas Utilizadas</H4>
                  <Ul>
                    <Li><strong>Backend:</strong></Li>
                    <Li style={{ marginLeft: "10px" }}>Node.js com Express.js.</Li>
                    <Li style={{ marginLeft: "10px" }}>Bibliotecas espec√≠ficas: <strong>youtube-dl-exec</strong>, <strong>@distube/ytdl-core</strong>, <strong>fluent-ffmpeg.</strong></Li>
                    <Li><strong>Processamento de V√≠deo:</strong></Li>
                    <Li style={{ marginLeft: "10px" }}>FFmpeg para manipula√ß√£o de arquivos multim√≠dia.</Li>
                    <Li><strong>Comunica√ß√£o em Tempo Real:</strong></Li>
                    <Li style={{ marginLeft: "10px" }}>Socket.io para fornecer atualiza√ß√µes do progresso ao cliente.</Li>
                    <Li><strong>Gerenciamento de Arquivos:</strong></Li>
                    <Li style={{ marginLeft: "10px" }}><strong>fs</strong> para manipula√ß√£o de arquivos e diret√≥rios tempor√°rios.</Li>
                    <Li><strong>Configura√ß√µes e Seguran√ßa:</strong></Li>
                    <Li style={{ marginLeft: "10px" }}><strong>dotenv</strong> para gerenciamento de vari√°veis de ambiente.</Li>
                    <Li style={{ marginLeft: "10px" }}>Configura√ß√£o de CORS para controlar o acesso ao servidor.</Li>
                  </Ul>
                  <H4>4. Destaques do C√≥digo</H4>
                  <Ul>
                    <Li><strong>Uso de Bibliotecas Avan√ßadas:</strong></Li>
                    <Li style={{ marginLeft: "10px" }}>Integra√ß√£o de bibliotecas como <strong>youtube-dl-exec</strong> e <strong>@distube/ytdl-core</strong>  para lidar com a l√≥gica de download diretamente da API do YouTube.</Li>
                    <Li><strong>Desempenho e Otimiza√ß√£o:</strong></Li>
                    <Li style={{ marginLeft: "10px" }}>Configura√ß√£o de -preset ultrafast no FFmpeg para acelerar o processamento.</Li>
                    <Li style={{ marginLeft: "10px" }}>Implementa√ß√£o de l√≥gica para evitar processamento redundante ao filtrar formatos de v√≠deo.</Li>
                    <Li><strong>Feedback ao Usu√°rio:</strong></Li>
                    <Li style={{ marginLeft: "10px" }}>Uso de eventos do FFmpeg para rastrear progresso e transmitir essas informa√ß√µes via Socket.io.</Li>
                  </Ul>
                  <H4>5. Poss√≠veis Melhorias</H4>
                  <Ul>
                    <Li>1. <strong>Seguran√ßa:</strong></Li>
                    <Li style={{ marginLeft: "10px" }}>Validar melhor as entradas do cliente para evitar poss√≠veis vulnerabilidades de inje√ß√£o.</Li>
                    <Li style={{ marginLeft: "10px" }}>Implementar autentica√ß√£o ou controle de acesso para proteger as rotas.</Li>
                    <Li>2. <strong>Escalabilidade:</strong></Li>
                    <Li style={{ marginLeft: "10px" }}>Gerenciar melhor o estado isProcessing para suportar m√∫ltiplas requisi√ß√µes de diferentes usu√°rios simultaneamente, possivelmente usando filas de trabalho.</Li>
                    <Li>3. <strong>Manuten√ß√£o:</strong></Li>
                    <Li style={{ marginLeft: "10px" }}>Modularizar o c√≥digo para melhorar a legibilidade e facilitar a manuten√ß√£o futura.</Li>
                    <Li style={{ marginLeft: "10px" }}>Separar l√≥gica de rotas, middlewares e processamento de arquivos em pastas distintas.</Li>
                    <Li>4. <strong>Monitoramento e Logging:</strong></Li>
                    <Li style={{ marginLeft: "10px" }}>Adicionar uma camada de logging com ferramentas como <strong>winston</strong> ou <strong>pino</strong> para monitorar erros e processos.</Li>
                    <Li>5. <strong>Experi√™ncia do Usu√°rio:</strong></Li>
                    <Li style={{ marginLeft: "10px" }}>Oferecer mais op√ß√µes de formatos e resolu√ß√µes.</Li>
                    <Li style={{ marginLeft: "10px" }}>Melhorar a interface de feedback ao cliente, talvez adicionando notifica√ß√µes mais detalhadas ou hist√≥ricos.</Li>
                  </Ul>
                </div>
              </>
            )}
          </Container>
        </Main>
      </div>
    </>
  );
};

export default Ytformp4;