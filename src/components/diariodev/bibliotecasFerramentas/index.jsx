import { useEffect } from 'react';
import { Container, SectionTitle, Check, Paragraph, List } from "@/styles/globalStyles";
import hljs from 'highlight.js'; // Importando o highlight.js
import 'highlight.js/styles/atom-one-dark.css'; // Estilo para colorir a sintaxe

const BibliotecasFerramentas = () => {


  useEffect(() => {
    hljs.highlightAll(); // Aplica o destaque de sintaxe a todos os blocos de c√≥digo
  }, []);

  return (
    <>
      <Container>
        <SectionTitle>
          <Check>üìö</Check> Bibliotecas
        </SectionTitle>

        <Paragraph>
          S√£o pacotes que adicionam <strong>funcionalidades espec√≠ficas</strong> que voc√™ usa diretamente no c√≥digo da aplica√ß√£o.
          Elas oferecem funcionalidades prontas para uso, como o gerenciamento de banco de dados, tratamento de erros, valida√ß√£o de dados, etc.
        </Paragraph>

        <div style={{ fontWeight: '600', marginBottom: '8px' }}>Exemplos comuns:</div>

        <List>
          <li><strong>express-async-errors (backend):</strong> tratamento de erros ass√≠ncronos no Express. <em>Exemplo: Facilita a captura e tratamento de erros em rotas ass√≠ncronas.</em></li>
          <li><strong>TypeORM / Prisma (backend):</strong> ORM para banco de dados. <em>Exemplo: Permite interagir com o banco de dados atrav√©s de um modelo de objetos.</em></li>
          <li><strong>Swagger (backend):</strong> documenta√ß√£o autom√°tica da API. <em>Exemplo: Gera uma interface interativa que permite testar endpoints da API diretamente do navegador.</em></li>
          <li><strong>class-validator (backend):</strong> valida√ß√£o de dados. <em>Exemplo: Valida se os dados de entrada correspondem ao formato esperado (ex: email v√°lido).</em></li>
          <li><strong>Winston (backend):</strong> logging. <em>Exemplo: Permite a cria√ß√£o de logs para monitoramento de atividades e erros no backend.</em></li>
          <li><strong>Helmet e CORS (backend):</strong> seguran√ßa HTTP e controle de acesso. <em>Exemplo: Helmet melhora a seguran√ßa definindo cabe√ßalhos HTTP, e CORS controla quais origens podem acessar a API.</em></li>
        </List>
      </Container>

      <Container>
        <SectionTitle>
          <Check>üõ†Ô∏è</Check> Ferramentas
        </SectionTitle>

        <Paragraph>
          Auxiliam no desenvolvimento, organiza√ß√£o, formata√ß√£o e automa√ß√£o, mas atuam fora do fluxo direto do c√≥digo da aplica√ß√£o.
          Elas s√£o usadas para melhorar o ambiente de desenvolvimento e garantir padr√µes de qualidade no c√≥digo.
        </Paragraph>

        <div style={{ fontWeight: '600', marginBottom: '8px' }}>Exemplos comuns:</div>

        <List>
          <li><strong>ESLint (front/backend):</strong> analisa e corrige problemas no c√≥digo. <em>Exemplo: Identifica e alerta sobre erros de sintaxe e problemas de estilo no c√≥digo.</em></li>
          <li><strong>Prettier (front/backend):</strong> formata c√≥digo automaticamente. <em>Exemplo: Formata o c√≥digo para garantir consist√™ncia no estilo e facilitar a leitura.</em></li>
          <li><strong>Husky (front/backend):</strong> executa tarefas autom√°ticas (ex: testes) antes do commit. <em>Exemplo: Garante que os testes sejam executados antes de cada commit para evitar falhas no c√≥digo.</em></li>
          <li><strong>Lint-Staged (front/backend):</strong> verifica apenas arquivos modificados antes do commit. <em>Exemplo: Aumenta a efici√™ncia ao realizar verifica√ß√µes apenas em arquivos que foram alterados.</em></li>
          <li><strong>Jest / Supertest (front/backend):</strong> frameworks e ferramentas para testes unit√°rios e de API. <em>Exemplo: Jest executa testes unit√°rios para garantir a qualidade do c√≥digo, enquanto o Supertest testa APIs.</em></li>
        </List>
      </Container>

      <Container>
        <SectionTitle>
          <Check>üîå</Check> API
        </SectionTitle>

        <Paragraph>
          API (Interface de Programa√ß√£o de Aplica√ß√µes) √© um conjunto de defini√ß√µes e protocolos que permite que um software interaja com outro, como uma ponte entre sistemas diferentes.
          Elas permitem a comunica√ß√£o entre sistemas de forma padronizada.
        </Paragraph>

        <div style={{ fontWeight: '600', marginBottom: '8px' }}>Exemplos comuns:</div>

        <List>
          <li><strong>API REST (frontend/backend):</strong> interface para comunica√ß√£o entre sistemas via HTTP. <em>Exemplo: Voc√™ pode fazer requisi√ß√µes GET, POST, PUT, DELETE para interagir com a API de um sistema.</em></li>
          <li><strong>Exemplo: API do GitHub:</strong> permite acessar informa√ß√µes sobre reposit√≥rios, commits e outros dados do GitHub via HTTP. <em>Exemplo pr√°tico: Obter informa√ß√µes sobre reposit√≥rios e contribui√ß√µes diretamente pelo c√≥digo.</em></li>
          <li><strong>GraphQL (frontend/backend):</strong> consulta de dados com flexibilidade no backend. <em>Exemplo: Permite que o cliente defina exatamente os dados que deseja obter, sem depender de um endpoint fixo.</em></li>
          <li><strong>Exemplo: API do Spotify:</strong> permite buscar m√∫sicas, √°lbuns, artistas e criar playlists via GraphQL. <em>Exemplo pr√°tico: Criar playlists personalizadas com base nas prefer√™ncias do usu√°rio.</em></li>
        </List>
      </Container>

      <Container>
        <SectionTitle>
          <Check>üõ†Ô∏è</Check> SDK
        </SectionTitle>

        <Paragraph>
          SDK (Kit de Desenvolvimento de Software) √© um conjunto de ferramentas que facilita o desenvolvimento de aplica√ß√µes para uma plataforma ou servi√ßo espec√≠fico.
          Ele fornece os recursos necess√°rios para facilitar a integra√ß√£o com plataformas externas, como Firebase ou Stripe.
        </Paragraph>

        <div style={{ fontWeight: '600', marginBottom: '8px' }}>Exemplos comuns:</div>

        <List>
          <li><strong>Firebase SDK (frontend/backend):</strong> facilita a integra√ß√£o com a plataforma Firebase. <em>Exemplo: Uso do Firebase SDK para autenticar usu√°rios, armazenar dados em tempo real e enviar notifica√ß√µes push.</em></li>
          <li><strong>Exemplo: Firebase Authentication SDK:</strong> permite autenticar usu√°rios via email, Google, Facebook e outros. <em>Exemplo pr√°tico: Permite que usu√°rios se registrem ou fa√ßam login usando suas contas do Google.</em></li>
          <li><strong>Stripe SDK (frontend/backend):</strong> permite integra√ß√£o de pagamentos em sites e aplicativos. <em>Exemplo: Uso do Stripe SDK para processar pagamentos seguros em um site de e-commerce.</em></li>
          <li><strong>Exemplo: Stripe Checkout SDK:</strong> facilita a implementa√ß√£o de pagamentos de forma segura em e-commerce. <em>Exemplo pr√°tico: Configura√ß√£o de uma p√°gina de pagamento que aceita cart√µes de cr√©dito, d√©bito e outros m√©todos de pagamento.</em></li>
        </List>
      </Container>

      <Container>
        <SectionTitle>
          <Check>üìö</Check> Bibliotecas
        </SectionTitle>

        <Paragraph>
          S√£o pacotes que adicionam <strong>funcionalidades espec√≠ficas</strong> que voc√™ usa diretamente no c√≥digo da aplica√ß√£o.
          Elas oferecem funcionalidades prontas para uso, como o gerenciamento de banco de dados, tratamento de erros, valida√ß√£o de dados, etc.
        </Paragraph>

        <div style={{ fontWeight: '600', marginBottom: '8px' }}>Exemplos reais:</div>

        <List>
          <li><strong>express-async-errors (backend):</strong> tratamento de erros ass√≠ncronos no Express.
            <em>
              <br />Exemplo de c√≥digo:
              <pre><code className="javascript">{`import express from 'express';
import 'express-async-errors'; // Isso adiciona tratamento ass√≠ncrono de erros

const app = express();

app.get('/api', async (req, res) => {
  throw new Error('Erro!'); // Exemplo de erro
});

app.listen(3000, () => console.log('Servidor rodando na porta 3000'));`}</code></pre>
            </em>
          </li>
          <li><strong>TypeORM / Prisma (backend):</strong> ORM para banco de dados.
            <em>
              <br />Exemplo de c√≥digo (TypeORM):
              <pre><code className="javascript">{`import { createConnection } from 'typeorm';

createConnection({
  type: 'postgres',
  host: 'localhost',
  port: 5432,
  username: 'test',
  password: 'test',
  database: 'test',
  entities: [User],
  synchronize: true,
}).then(() => console.log('Conectado ao banco de dados'));`}</code></pre>
            </em>
          </li>
          <li><strong>Swagger (backend):</strong> documenta√ß√£o autom√°tica da API.
            <em>
              <br />Exemplo de c√≥digo:
              <pre><code className="javascript">{`import express from 'express';
import swaggerJsdoc from 'swagger-jsdoc';
import swaggerUi from 'swagger-ui-express';

const app = express();

const options = {
  definition: {
    openapi: '3.0.0',
    info: {
      title: 'API exemplo',
      version: '1.0.0',
    },
  },
  apis: ['./routes.js'],
};

const specs = swaggerJsdoc(options);
app.use('/api-docs', swaggerUi.serve, swaggerUi.setup(specs));

app.listen(3000, () => console.log('Servidor rodando na porta 3000'));`}</code></pre>
            </em>
          </li>
        </List>
      </Container>

      <Container>
        <SectionTitle>
          <Check>üõ†Ô∏è</Check> Ferramentas
        </SectionTitle>

        <Paragraph>
          Auxiliam no desenvolvimento, organiza√ß√£o, formata√ß√£o e automa√ß√£o, mas atuam fora do fluxo direto do c√≥digo da aplica√ß√£o.
          Elas s√£o usadas para melhorar o ambiente de desenvolvimento e garantir padr√µes de qualidade no c√≥digo.
        </Paragraph>

        <div style={{ fontWeight: '600', marginBottom: '8px' }}>Exemplos reais:</div>

        <List>
          <li><strong>ESLint (front/backend):</strong> analisa e corrige problemas no c√≥digo.
            <em>
              <br />Exemplo de c√≥digo (configura√ß√£o do ESLint):
              <pre><code className="javascript">{`module.exports = {
  env: {
    node: true,
    es6: true,
  },
  extends: ['eslint:recommended'],
  parserOptions: {
    ecmaVersion: 2020,
  },
  rules: {
    'no-console': 'warn',
  },
};`}</code></pre>
            </em>
          </li>
          <li><strong>Prettier (front/backend):</strong> formata c√≥digo automaticamente.
            <em>
              <br />Exemplo de c√≥digo (configura√ß√£o do Prettier):
              <pre><code className="javascript">{`module.exports = {
  semi: false,
  singleQuote: true,
  trailingComma: 'all',
};`}</code></pre>
            </em>
          </li>
          <li><strong>Husky (front/backend):</strong> executa tarefas autom√°ticas (ex: testes) antes do commit.
            <em>
              <br />Exemplo de c√≥digo (configura√ß√£o do Husky):
              <pre><code className="javascript">{`"husky": {
  "hooks": {
    "pre-commit": "lint-staged",
    "pre-push": "npm test"
  }
},`}</code></pre>
            </em>
          </li>
        </List>
      </Container>

      <Container>
        <SectionTitle>
          <Check>üîå</Check> API
        </SectionTitle>

        <Paragraph>
          API (Interface de Programa√ß√£o de Aplica√ß√µes) √© um conjunto de defini√ß√µes e protocolos que permite que um software interaja com outro, como uma ponte entre sistemas diferentes.
          Elas permitem a comunica√ß√£o entre sistemas de forma padronizada.
        </Paragraph>

        <div style={{ fontWeight: '600', marginBottom: '8px' }}>Exemplos reais:</div>

        <List>
          <li><strong>API REST (frontend/backend):</strong> interface para comunica√ß√£o entre sistemas via HTTP.
            <em>
              <br />Exemplo de c√≥digo:
              <pre><code className="javascript">{`fetch('https://api.github.com/users/octocat')
  .then(response => response.json())
  .then(data => console.log(data));`}</code></pre>
            </em>
          </li>
          <li><strong>Exemplo: API do GitHub:</strong> permite acessar informa√ß√µes sobre reposit√≥rios, commits e outros dados do GitHub via HTTP.
            <em>
              <br />Exemplo de c√≥digo:
              <pre><code className="javascript">{`fetch('https://api.github.com/repos/octocat/Hello-World/commits')
  .then(response => response.json())
  .then(data => console.log(data));`}</code></pre>
            </em>
          </li>
        </List>
      </Container>

      <Container>
        <SectionTitle>
          <Check>üõ†Ô∏è</Check> SDK
        </SectionTitle>

        <Paragraph>
          SDK (Kit de Desenvolvimento de Software) √© um conjunto de ferramentas que facilita o desenvolvimento de aplica√ß√µes para uma plataforma ou servi√ßo espec√≠fico.
          Ele fornece os recursos necess√°rios para facilitar a integra√ß√£o com plataformas externas, como Firebase ou Stripe.
        </Paragraph>

        <div style={{ fontWeight: '600', marginBottom: '8px' }}>Exemplos reais:</div>

        <List>
          <li><strong>Firebase SDK (frontend/backend):</strong> facilita a integra√ß√£o com a plataforma Firebase.
            <em>
              <br />Exemplo de c√≥digo (Firebase Authentication):
              <pre><code className="javascript">{`import firebase from 'firebase/app';
import 'firebase/auth';

firebase.initializeApp({ 
  apiKey: 'YOUR_API_KEY',
  authDomain: 'YOUR_AUTH_DOMAIN',
  projectId: 'YOUR_PROJECT_ID',
});

firebase.auth().createUserWithEmailAndPassword('email@example.com', 'password')
  .then(user => console.log(user))
  .catch(error => console.log(error));`}</code></pre>
            </em>
          </li>
          <li><strong>Stripe SDK (frontend/backend):</strong> permite integra√ß√£o de pagamentos em sites e aplicativos.
            <em>
              <br />Exemplo de c√≥digo (Stripe Checkout):
              <pre><code className="javascript">{`const stripe = Stripe('YOUR_PUBLIC_KEY');
const checkoutButton = document.getElementById('checkout-button');

checkoutButton.addEventListener('click', () => {
  stripe.redirectToCheckout({ sessionId: 'SESSION_ID' })
    .then(result => {
      if (result.error) {
        alert(result.error.message);
      }
    });
});`}</code></pre>
            </em>
          </li>
        </List>
      </Container>
    </>
  );
};

export default BibliotecasFerramentas;
