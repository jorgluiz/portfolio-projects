import { Container, SectionTitle, Check, List, Title, Paragraph, CodeBlockF0F0F0, Label, Separator, Bold } from "@/styles/globalStyles";

const FrontendTecnologiasNextjs = () => {

  return (
    <>
      <Container>
        <SectionTitle>
          <Check>üöÄ</Check> Quando usar Next.js no frontend?
        </SectionTitle>
        <Paragraph><Bold>O que √© Next.js?</Bold></Paragraph>
        <Paragraph>Framework React com foco em renderiza√ß√£o h√≠brida (SSR, SSG e CSR).</Paragraph>
        <Paragraph>Suporta rotas autom√°ticas baseadas no sistema de arquivos.</Paragraph>
        <Paragraph>Vem com v√°rias otimiza√ß√µes embutidas: roteamento, otimiza√ß√£o de imagens, gera√ß√£o de sites est√°ticos, API Routes etc.</Paragraph>
      </Container>

      <Container>
        <SectionTitle>
          <Check>‚è∞</Check> Quando usar Next.js?
        </SectionTitle>
        <List>
          <li><Bold>SEO √© importante</Bold><br />
            Apps que precisam ser bem indexados por motores de busca (Google etc) ‚Äî pois Next.js permite Server-Side Rendering (SSR) e Static Site Generation (SSG), melhorando o SEO.
          </li>
          <li><Bold>Performance de carregamento inicial</Bold><br />
            SSR e SSG melhoram o tempo de carregamento da p√°gina inicial porque o HTML j√° vem pr√©-renderizado do servidor.
          </li>
          <li><Bold>Sites com conte√∫do din√¢mico e/ou est√°tico misturado</Bold><br />
            Voc√™ pode gerar p√°ginas est√°ticas para conte√∫do fixo e usar SSR para p√°ginas que precisam ser atualizadas a cada requisi√ß√£o.
          </li>
          <li><Bold>Apps que precisam de rotas API simples integradas</Bold><br />
            Next.js permite criar APIs dentro do pr√≥prio projeto, √∫til para micro-servi√ßos ou pequenas integra√ß√µes sem backend separado.
          </li>
          <li><Bold>Melhor experi√™ncia de desenvolvimento com roteamento autom√°tico</Bold><br />
            Estrutura de pastas simples, menos configura√ß√£o manual.
          </li>
          <li><Bold>Projetos onde o SEO, performance e UX s√£o prioridade</Bold><br />
            Ex: lojas online, blogs, portais de not√≠cias, dashboards p√∫blicos.
          </li>
        </List>
      </Container>

      <Container>
        <Title>
          <Check>‚öôÔ∏è</Check> Quando n√£o usar Next.js?
        </Title>

        <Paragraph>
          App muito simples ou SPA puramente cliente, onde SSR/SSG n√£o faz diferen√ßa.
        </Paragraph>
        <Paragraph>
          Projetos 100% backend ou APIs (Next.js tem API Routes, mas n√£o substitui um backend robusto).
        </Paragraph>
        <Paragraph>
          Quando voc√™ j√° tem um backend separado e quer uma frontend SPA isolada, sem renderiza√ß√£o no servidor.
        </Paragraph>
        <Paragraph>
          Projetos onde a equipe n√£o tem familiaridade com SSR/SSG e prefere algo mais simples (React puro com CRA ou Vite).
        </Paragraph>
      </Container>

      <Container>
        <Title>
          <Check>üö©</Check> Principais vantagens do Next.js
        </Title>
        <List>
          <li>SSR (Server-Side Rendering)</li>
          <li>SSG (Static Site Generation)</li>
          <li>Incremental Static Regeneration (ISR) ‚Äî atualiza p√°ginas est√°ticas em background sem rebuild completo.</li>
          <li>API Routes ‚Äî endpoints backend dentro do Next.js.</li>
          <li>Image Optimization ‚Äî otimiza√ß√£o autom√°tica de imagens.</li>
          <li>Built-in CSS & Sass support</li>
          <li>Suporte para middleware</li>
          <li>Rotas din√¢micas f√°ceis</li>
        </List>
      </Container>

      <Container>
        <Title>
          <Check>üìÅ</Check> Estrutura b√°sica t√≠pica Next.js
        </Title>

        <Label>kotlin</Label>

        <CodeBlockF0F0F0>
          {`/pages               <- cada arquivo vira uma rota
/api               <- API routes (fun√ß√µes backend)
index.tsx          <- p√°gina principal
about.tsx          <- p√°gina about

/public              <- arquivos est√°ticos (imagens, favicon, etc)

/components          <- componentes React reutiliz√°veis
/styles              <- estilos globais, CSS Modules, etc.`}
        </CodeBlockF0F0F0>
      </Container>

      <Container>
        <SectionTitle>getStaticProps (Gera√ß√£o Est√°tica)</SectionTitle>

        <Paragraph><Bold>Objetivo:</Bold> √â usado para gerar p√°ginas de forma est√°tica no momento da constru√ß√£o (build), ou seja, os dados s√£o buscados e renderizados antes de o site ser servido ao usu√°rio.</Paragraph>
        <Paragraph><Bold>Quando usar:</Bold> Quando os dados da p√°gina n√£o mudam frequentemente ou podem ser atualizados apenas em intervalos espec√≠ficos.</Paragraph>
        <Paragraph><Bold>Como funciona:</Bold></Paragraph>
        <List style={{ paddingLeft: '20px' }}>
          <li>Execu√ß√£o no momento da constru√ß√£o: Durante o build do Next.js, o getStaticProps √© chamado, e a p√°gina gerada √© salva como uma vers√£o est√°tica. Isso significa que o conte√∫do j√° est√° pronto e pode ser entregue rapidamente aos usu√°rios.</li>
          <li>Exemplo de uso: P√°ginas de blog, portf√≥lios ou cat√°logos de produtos que n√£o requerem dados atualizados constantemente.</li>
        </List>

        <CodeBlockF0F0F0>
          {`export async function getStaticProps() {
  const data = await fetch('https://api.example.com/data');
  const json = await data.json();

  return {
    props: {
      data: json,
    },
  };
}`}
        </CodeBlockF0F0F0>

        <Separator />

        <SectionTitle>getServerSideProps (Renderiza√ß√£o no Lado do Servidor)</SectionTitle>

        <Paragraph><Bold>Objetivo:</Bold> Ele √© usado para buscar e renderizar dados din√¢micos no momento da requisi√ß√£o, ou seja, a p√°gina √© gerada sempre que o usu√°rio acessa a p√°gina.</Paragraph>
        <Paragraph><Bold>Quando usar:</Bold> Quando os dados precisam ser sempre atualizados ou quando dependem de vari√°veis como cookies, autentica√ß√£o ou outras condi√ß√µes que mudam com o tempo.</Paragraph>
        <Paragraph><Bold>Como funciona:</Bold></Paragraph>
        <List style={{ paddingLeft: '20px' }}>
          <li>Execu√ß√£o a cada requisi√ß√£o: Sempre que uma requisi√ß√£o √© feita para a p√°gina, o getServerSideProps √© executado no servidor, buscando os dados mais recentes e gerando a p√°gina em tempo real.</li>
          <li>Exemplo de uso: P√°ginas de dashboards, feeds de redes sociais ou outras p√°ginas com dados atualizados frequentemente.</li>
        </List>

        <CodeBlockF0F0F0>
          {`export async function getServerSideProps(context) {
  const res = await fetch('https://api.example.com/dynamic-data');
  const data = await res.json();

  return {
    props: {
      data,
    },
  };
}`}
        </CodeBlockF0F0F0>

        <Separator />

        <SectionTitle>Diferen√ßas principais:</SectionTitle>
        <List>
          <li><Bold>getStaticProps:</Bold> A p√°gina √© gerada no momento da constru√ß√£o (build) e serve para conte√∫do que n√£o muda com frequ√™ncia.</li>
          <li><Bold>getServerSideProps:</Bold> A p√°gina √© gerada a cada requisi√ß√£o feita ao servidor, garantindo que o conte√∫do esteja sempre atualizado com dados din√¢micos.</li>
        </List>

        <SectionTitle>Quando escolher um ou outro:</SectionTitle>
        <List>
          <li><Bold>getStaticProps:</Bold> Ideal para conte√∫do que n√£o muda frequentemente ou pode ser regenerado em intervalos espec√≠ficos (como em blogs ou cat√°logos de produtos).</li>
          <li><Bold>getServerSideProps:</Bold> √ötil quando √© necess√°rio garantir que os dados mais recentes sejam carregados a cada acesso, especialmente quando o conte√∫do depende de fatores vari√°veis como a hora ou estado do usu√°rio.</li>
        </List>

        <SectionTitle>Resumindo:</SectionTitle>
        <List>
          <li><Bold>getStaticProps:</Bold> Para dados est√°ticos, gerados no momento da constru√ß√£o (build).</li>
          <li><Bold>getServerSideProps:</Bold> Para dados din√¢micos, gerados a cada requisi√ß√£o no lado do servidor.</li>
        </List>

        <Paragraph>
          Se o seu projeto n√£o exige dados din√¢micos (como conte√∫do atualizado frequentemente ou personalizado para o usu√°rio), o uso de <Bold>getStaticProps</Bold> √© mais eficiente, pois gera p√°ginas est√°ticas e proporciona uma performance melhor.
        </Paragraph>
      </Container>

      <Container>
        <SectionTitle>1. getStaticProps (Renderiza√ß√£o Est√°tica)</SectionTitle>

        <Paragraph>
          getStaticProps √© utilizado quando voc√™ deseja gerar uma p√°gina de forma est√°tica no momento da constru√ß√£o (build) do site.
          Ele permite que voc√™ pr√©-renderize p√°ginas com dados que n√£o mudam com frequ√™ncia. Usar getStaticProps √© √∫til para gerar p√°ginas de conte√∫do fixo ou quase fixo.
        </Paragraph>

        <Paragraph><Bold>Como usar:</Bold></Paragraph>
        <Paragraph>
          No caso da p√°gina de projetos, se as informa√ß√µes das metatags (como t√≠tulo, descri√ß√£o, etc.) s√£o est√°ticas ou mudam muito raramente, voc√™ pode usar getStaticProps.
        </Paragraph>

        <CodeBlockF0F0F0>
          {`import Head from "next/head";

const Projetos = ({ metadata }) => {
  return (
    <>
      <Head>
        <title>{metadata.title}</title>
        <meta name="description" content={metadata.description} />
        <meta property="og:title" content={metadata.ogTitle} />
        <meta property="og:description" content={metadata.ogDescription} />
        <meta property="og:image" content={metadata.ogImage} />
        <meta property="og:url" content={metadata.url} />
      </Head>
      <div style={{ display: "flex" }}>
        {/* Seu conte√∫do */}
      </div>
    </>
  );
};

// Usado para carregar dados no momento da constru√ß√£o (build)
export async function getStaticProps() {

  // Aqui voc√™ pode buscar dados de uma API, banco de dados ou usar valores fixos

  const metadata = {
    title: "Portf√≥lio de Desenvolvimento Web",
    description: "Descri√ß√£o do portf√≥lio",
    ogTitle: "Portf√≥lio de Desenvolvimento Web",
    ogDescription: "Descri√ß√£o do portf√≥lio",
    ogImage: "https://link-da-imagem.jpg",
    url: "https://meuportfolio.com/projetos",
  };

  return {
    props: { metadata }, // Passa os dados para o componente como props
  };
}

export default Projetos;`}
        </CodeBlockF0F0F0>

        <Paragraph><Bold>Vantagens de getStaticProps:</Bold></Paragraph>
        <List style={{ paddingLeft: '20px' }}>
          <li>A p√°gina √© gerada apenas uma vez durante o build (n√£o h√° renderiza√ß√£o din√¢mica no momento de acesso).</li>
          <li>As p√°ginas s√£o extremamente r√°pidas para carregar, pois j√° est√£o geradas e prontas para serem entregues aos usu√°rios.</li>
        </List>

        <Paragraph><Bold>Quando usar:</Bold></Paragraph>
        <List style={{ paddingLeft: '20px' }}>
          <li>Quando o conte√∫do n√£o muda com frequ√™ncia (por exemplo, descri√ß√µes ou metatags fixas).</li>
          <li>Quando voc√™ n√£o precisa de dados que variam a cada solicita√ß√£o do usu√°rio.</li>
        </List>
      </Container>

      <Container>
        <SectionTitle>1.1 Cen√°rios onde voc√™ usaria getStaticProps</SectionTitle>

        <Paragraph>
          Com getStaticProps:
        </Paragraph>

        <Paragraph>
          Se o conte√∫do descritivo ou meta-informa√ß√µes (como o t√≠tulo, descri√ß√£o ou destaques do projeto) forem armazenados em um CMS (como Strapi ou Sanity) ou em uma API, voc√™ poderia usar getStaticProps para buscar os dados na build e construir a p√°gina.
        </Paragraph>

        <CodeBlockF0F0F0>
          {`export async function getStaticProps() {

  const response = await fetch("https://api.example.com/project-data");
  const projectData = await response.json();

  return {
    props: {
      projectData,
    },
    revalidate: 60, // Atualiza os dados a cada 60 segundos
  };
}`}
        </CodeBlockF0F0F0>
      </Container>

      <Container>
        <SectionTitle>2. getServerSideProps (Renderiza√ß√£o no Lado do Servidor)</SectionTitle>

        <Paragraph>
          getServerSideProps √© usado quando voc√™ precisa de dados din√¢micos que s√£o gerados a cada requisi√ß√£o, ou seja, sempre que a p√°gina for carregada. Isso √© √∫til se as metatags, por exemplo, dependerem de par√¢metros din√¢micos ou de dados que mudam frequentemente (como informa√ß√µes de usu√°rios ou dados em tempo real).
        </Paragraph>

        <Paragraph><Bold>Como usar:</Bold></Paragraph>
        <Paragraph>
          Se as informa√ß√µes das metatags ou o conte√∫do da p√°gina precisam ser din√¢micas e geradas a cada requisi√ß√£o (por exemplo, metatags personalizadas para cada usu√°rio ou p√°gina), use getServerSideProps.
        </Paragraph>

        <CodeBlockF0F0F0>
          {`import Head from "next/head";

const Projetos = ({ metadata }) => {

  return (
    <>
      <Head>
        <title>{metadata.title}</title>
        <meta name="description" content={metadata.description} />
        <meta property="og:title" content={metadata.ogTitle} />
        <meta property="og:description" content={metadata.ogDescription} />
        <meta property="og:image" content={metadata.ogImage} />
        <meta property="og:url" content={metadata.url} />
      </Head>

      <div style={{ display: "flex" }}>
        {/* Seu conte√∫do */}
      </div>
    </>
  );
};`}
        </CodeBlockF0F0F0>

        <CodeBlockF0F0F0>
          {`// Usado para carregar dados sempre que a p√°gina for acessada

export async function getServerSideProps() {

  // Aqui voc√™ pode buscar dados din√¢micos de uma API ou banco de dados

  const metadata = {
    title: "Portf√≥lio de Desenvolvimento Web",
    description: "Descri√ß√£o atualizada do portf√≥lio",
    ogTitle: "Portf√≥lio de Desenvolvimento Web",
    ogDescription: "Descri√ß√£o atualizada do portf√≥lio",
    ogImage: "https://link-da-imagem.jpg",
    url: "https://meuportfolio.com/projetos",
  };

  return {
    props: { metadata }, // Passa os dados para o componente como props
  };
}

export default Projetos;`}
        </CodeBlockF0F0F0>

        <Paragraph><Bold>Vantagens de getServerSideProps:</Bold></Paragraph>
        <List style={{ paddingLeft: '20px' }}>
          <li>Gera conte√∫do din√¢mico sempre que a p√°gina √© acessada.</li>
          <li>Ideal para casos onde as informa√ß√µes podem mudar frequentemente e precisam ser sempre atualizadas.</li>
        </List>

        <Paragraph><Bold>Quando usar:</Bold></Paragraph>
        <List style={{ paddingLeft: '20px' }}>
          <li>Quando voc√™ precisa gerar conte√∫do din√¢mico, baseado em dados de um banco de dados ou API, em cada requisi√ß√£o.</li>
          <li>Para p√°ginas com conte√∫do que muda frequentemente e que n√£o pode ser gerado apenas na constru√ß√£o.</li>
        </List>
      </Container>

      <Container>
        <SectionTitle>2.2 Cen√°rios onde voc√™ usaria getServerSideProps</SectionTitle>

        <Paragraph>
          Com getServerSideProps:
        </Paragraph>

        <Paragraph>
          Caso o conte√∫do dependa de informa√ß√µes din√¢micas do usu√°rio ou precise de atualiza√ß√µes frequentes (exemplo: autentica√ß√£o ou par√¢metros din√¢micos na URL), voc√™ poderia usar getServerSideProps.
        </Paragraph>

        <CodeBlockF0F0F0>
          {`export async function getServerSideProps(context) {

  const { params, req } = context;
  const response = await fetch(\`https://api.example.com/data?id=\${params.id}\`, {
    headers: { Authorization: \`Bearer \${req.cookies.token}\` },
  });
  const data = await response.json();

  return {
    props: {
      data,
    },
  };
}`}
        </CodeBlockF0F0F0>
      </Container>

      <Container>
        <SectionTitle>
          <Check>üìå</Check> Resumo
        </SectionTitle>

        <div>
          <Bold>getStaticProps:</Bold>
          <Paragraph>
            Ideal para dados est√°ticos ou que mudam raramente.
            <br />
            A p√°gina √© pr√©-gerada no build e pode ser entregue rapidamente aos usu√°rios.
          </Paragraph>
        </div>

        <Separator />

        <div>
          <Bold>getServerSideProps:</Bold>
          <Paragraph>
            Ideal para dados din√¢micos que precisam ser atualizados a cada requisi√ß√£o.
            <br />
            A p√°gina √© gerada no servidor, a cada solicita√ß√£o, o que pode aumentar o tempo de resposta.
          </Paragraph>
        </div>

        <Separator />

        <div>
          <Bold>Resumo geral:</Bold>
          <Paragraph>
            Se as metatags e os dados n√£o mudam frequentemente, use getStaticProps para gerar a p√°gina de forma est√°tica e mais r√°pida.
            <br />
            Se voc√™ precisa de dados que mudam frequentemente ou variam com base na requisi√ß√£o (como dados do usu√°rio ou par√¢metros din√¢micos), use getServerSideProps.
            <br />
            Isso ajudar√° a garantir que o conte√∫do do {'<head>'}, como as metatags, seja sempre gerado corretamente e otimizado para SEO.
          </Paragraph>
        </div>
      </Container>
    </>
  );
};

export default FrontendTecnologiasNextjs;
