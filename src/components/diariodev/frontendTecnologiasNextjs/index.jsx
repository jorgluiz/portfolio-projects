const FrontendTecnologiasNextjs = () => {
  const container = {
    fontFamily: 'Segoe UI, sans-serif',
    padding: '24px',
    maxWidth: '900px',
    margin: '0 auto 40px',
    color: '#222',
    backgroundColor: '#f9f9f9',
    borderRadius: '12px',
    boxShadow: '0 0 20px rgba(0,0,0,0.05)'
  };

  const sectionTitle = {
    fontSize: '24px',
    fontWeight: '700',
    marginBottom: '12px',
    display: 'flex',
    alignItems: 'center'
  };

  const check = {
    color: '#2ecc71',
    fontSize: '20px',
    marginRight: '8px'
  };

  const itemTitle = {
    fontSize: '18px',
    fontWeight: '600',
    margin: '20px 0 8px 0',
    borderBottom: '2px solid #ddd',
    paddingBottom: '4px'
  };

  const list = {
    paddingLeft: '20px',
    marginBottom: '12px',
    lineHeight: '1.6'
  };

  const container1 = {
    backgroundColor: '#f9f9f9',
    fontFamily: 'Segoe UI, sans-serif',
    padding: '32px',
    borderRadius: '12px',
    maxWidth: '800px',
    margin: '0 auto 40px',
    boxShadow: '0 4px 12px rgba(0,0,0,0.08)',
    color: '#222'
  };

  const title1 = {
    fontSize: '24px',
    fontWeight: '700',
    display: 'flex',
    alignItems: 'center',
    marginBottom: '24px',
  };

  const check1 = {
    fontSize: '22px',
    color: '#27ae60',
    marginRight: '10px',
  };

  const paragraph = {
    fontSize: '16px',
    lineHeight: '1.7',
    marginBottom: '12px'
  };

  const codeBlock1 = {
    backgroundColor: '#1e1e1e',
    color: '#f1f1f1',
    fontFamily: 'monospace',
    padding: '20px',
    borderRadius: '10px',
    whiteSpace: 'pre',
    fontSize: '15px',
    overflowX: 'auto',
    lineHeight: '1.6',
  };

  const label1 = {
    display: 'inline-block',
    backgroundColor: '#d1ecf1',
    color: '#0c5460',
    fontWeight: '600',
    fontSize: '14px',
    padding: '4px 8px',
    borderRadius: '6px',
    marginBottom: '12px',
  };

  const codeBlock = {
    backgroundColor: '#1e1e1e',
    color: '#f1f1f1',
    fontFamily: 'monospace',
    padding: '16px',
    borderRadius: '8px',
    whiteSpace: 'pre',
    fontSize: '14px',
    overflowX: 'auto',
    marginBottom: '20px',
    boxShadow: 'inset 0 0 5px rgba(0,0,0,0.7)'
  };

  const separator = {
    borderTop: '1px solid #ccc',
    margin: '20px 0',
  };

  const bold = {
    fontWeight: '600',
  };


  return (
    <>
      <div style={container}>
        <div style={sectionTitle}>
          <span style={check}>üöÄ</span> Quando usar Next.js no frontend?
        </div>
        <p style={paragraph}><strong>O que √© Next.js?</strong></p>
        <p style={paragraph}>Framework React com foco em renderiza√ß√£o h√≠brida (SSR, SSG e CSR).</p>
        <p style={paragraph}>Suporta rotas autom√°ticas baseadas no sistema de arquivos.</p>
        <p style={paragraph}>Vem com v√°rias otimiza√ß√µes embutidas: roteamento, otimiza√ß√£o de imagens, gera√ß√£o de sites est√°ticos, API Routes etc.</p>
      </div>

      <div style={container}>
        <div style={sectionTitle}>
          <span style={check}>‚è∞</span> Quando usar Next.js?
        </div>
        <ul style={list}>
          <li><strong>SEO √© importante</strong><br />
            Apps que precisam ser bem indexados por motores de busca (Google etc) ‚Äî pois Next.js permite Server-Side Rendering (SSR) e Static Site Generation (SSG), melhorando o SEO.
          </li>
          <li><strong>Performance de carregamento inicial</strong><br />
            SSR e SSG melhoram o tempo de carregamento da p√°gina inicial porque o HTML j√° vem pr√©-renderizado do servidor.
          </li>
          <li><strong>Sites com conte√∫do din√¢mico e/ou est√°tico misturado</strong><br />
            Voc√™ pode gerar p√°ginas est√°ticas para conte√∫do fixo e usar SSR para p√°ginas que precisam ser atualizadas a cada requisi√ß√£o.
          </li>
          <li><strong>Apps que precisam de rotas API simples integradas</strong><br />
            Next.js permite criar APIs dentro do pr√≥prio projeto, √∫til para micro-servi√ßos ou pequenas integra√ß√µes sem backend separado.
          </li>
          <li><strong>Melhor experi√™ncia de desenvolvimento com roteamento autom√°tico</strong><br />
            Estrutura de pastas simples, menos configura√ß√£o manual.
          </li>
          <li><strong>Projetos onde o SEO, performance e UX s√£o prioridade</strong><br />
            Ex: lojas online, blogs, portais de not√≠cias, dashboards p√∫blicos.
          </li>
        </ul>
      </div>

      <div style={container1}>
        <div style={title1}>
          <span style={check1}>‚öôÔ∏è</span> Quando n√£o usar Next.js?
        </div>

        <p style={paragraph}>
          App muito simples ou SPA puramente cliente, onde SSR/SSG n√£o faz diferen√ßa.
        </p>
        <p style={paragraph}>
          Projetos 100% backend ou APIs (Next.js tem API Routes, mas n√£o substitui um backend robusto).
        </p>
        <p style={paragraph}>
          Quando voc√™ j√° tem um backend separado e quer uma frontend SPA isolada, sem renderiza√ß√£o no servidor.
        </p>
        <p style={paragraph}>
          Projetos onde a equipe n√£o tem familiaridade com SSR/SSG e prefere algo mais simples (React puro com CRA ou Vite).
        </p>
      </div>

      <div style={container1}>
        <div style={title1}>
          <span style={check1}>üö©</span> Principais vantagens do Next.js
        </div>
        <ul style={list}>
          <li>SSR (Server-Side Rendering)</li>
          <li>SSG (Static Site Generation)</li>
          <li>Incremental Static Regeneration (ISR) ‚Äî atualiza p√°ginas est√°ticas em background sem rebuild completo.</li>
          <li>API Routes ‚Äî endpoints backend dentro do Next.js.</li>
          <li>Image Optimization ‚Äî otimiza√ß√£o autom√°tica de imagens.</li>
          <li>Built-in CSS & Sass support</li>
          <li>Suporte para middleware</li>
          <li>Rotas din√¢micas f√°ceis</li>
        </ul>
      </div>

      <div style={container1}>
        <div style={title1}>
          <span style={check1}>üìÅ</span> Estrutura b√°sica t√≠pica Next.js
        </div>

        <div style={label1}>kotlin</div>

        <pre style={codeBlock1}>
          {`/pages               <- cada arquivo vira uma rota
  /api               <- API routes (fun√ß√µes backend)
  index.tsx          <- p√°gina principal
  about.tsx          <- p√°gina about

/public              <- arquivos est√°ticos (imagens, favicon, etc)

/components          <- componentes React reutiliz√°veis
/styles              <- estilos globais, CSS Modules, etc.`}
        </pre>
      </div>

      <div style={container}>
        <div style={sectionTitle}>getStaticProps (Gera√ß√£o Est√°tica)</div>

        <p style={paragraph}><strong>Objetivo:</strong> √â usado para gerar p√°ginas de forma est√°tica no momento da constru√ß√£o (build), ou seja, os dados s√£o buscados e renderizados antes de o site ser servido ao usu√°rio.</p>
        <p style={paragraph}><strong>Quando usar:</strong> Quando os dados da p√°gina n√£o mudam frequentemente ou podem ser atualizados apenas em intervalos espec√≠ficos.</p>
        <p style={paragraph}><strong>Como funciona:</strong></p>
        <ul style={{ ...paragraph, paddingLeft: '20px' }}>
          <li>Execu√ß√£o no momento da constru√ß√£o: Durante o build do Next.js, o getStaticProps √© chamado, e a p√°gina gerada √© salva como uma vers√£o est√°tica. Isso significa que o conte√∫do j√° est√° pronto e pode ser entregue rapidamente aos usu√°rios.</li>
          <li>Exemplo de uso: P√°ginas de blog, portf√≥lios ou cat√°logos de produtos que n√£o requerem dados atualizados constantemente.</li>
        </ul>

        <pre style={codeBlock}>
          {`export async function getStaticProps() {
  const data = await fetch('https://api.example.com/data');
  const json = await data.json();

  return {
    props: {
      data: json,
    },
  };
}`}
        </pre>

        <hr style={{ margin: '30px 0' }} />

        <div style={sectionTitle}>getServerSideProps (Renderiza√ß√£o no Lado do Servidor)</div>

        <p style={paragraph}><strong>Objetivo:</strong> Ele √© usado para buscar e renderizar dados din√¢micos no momento da requisi√ß√£o, ou seja, a p√°gina √© gerada sempre que o usu√°rio acessa a p√°gina.</p>
        <p style={paragraph}><strong>Quando usar:</strong> Quando os dados precisam ser sempre atualizados ou quando dependem de vari√°veis como cookies, autentica√ß√£o ou outras condi√ß√µes que mudam com o tempo.</p>
        <p style={paragraph}><strong>Como funciona:</strong></p>
        <ul style={{ ...paragraph, paddingLeft: '20px' }}>
          <li>Execu√ß√£o a cada requisi√ß√£o: Sempre que uma requisi√ß√£o √© feita para a p√°gina, o getServerSideProps √© executado no servidor, buscando os dados mais recentes e gerando a p√°gina em tempo real.</li>
          <li>Exemplo de uso: P√°ginas de dashboards, feeds de redes sociais ou outras p√°ginas com dados atualizados frequentemente.</li>
        </ul>

        <pre style={codeBlock}>
          {`export async function getServerSideProps(context) {
  const res = await fetch('https://api.example.com/dynamic-data');
  const data = await res.json();

  return {
    props: {
      data,
    },
  };
}`}
        </pre>

        <hr style={{ margin: '30px 0' }} />

        <div style={sectionTitle}>Diferen√ßas principais:</div>
        <ul style={paragraph}>
          <li><strong>getStaticProps:</strong> A p√°gina √© gerada no momento da constru√ß√£o (build) e serve para conte√∫do que n√£o muda com frequ√™ncia.</li>
          <li><strong>getServerSideProps:</strong> A p√°gina √© gerada a cada requisi√ß√£o feita ao servidor, garantindo que o conte√∫do esteja sempre atualizado com dados din√¢micos.</li>
        </ul>

        <div style={sectionTitle}>Quando escolher um ou outro:</div>
        <ul style={paragraph}>
          <li><strong>getStaticProps:</strong> Ideal para conte√∫do que n√£o muda frequentemente ou pode ser regenerado em intervalos espec√≠ficos (como em blogs ou cat√°logos de produtos).</li>
          <li><strong>getServerSideProps:</strong> √ötil quando √© necess√°rio garantir que os dados mais recentes sejam carregados a cada acesso, especialmente quando o conte√∫do depende de fatores vari√°veis como a hora ou estado do usu√°rio.</li>
        </ul>

        <div style={sectionTitle}>Resumindo:</div>
        <ul style={paragraph}>
          <li><strong>getStaticProps:</strong> Para dados est√°ticos, gerados no momento da constru√ß√£o (build).</li>
          <li><strong>getServerSideProps:</strong> Para dados din√¢micos, gerados a cada requisi√ß√£o no lado do servidor.</li>
        </ul>

        <p style={paragraph}>
          Se o seu projeto n√£o exige dados din√¢micos (como conte√∫do atualizado frequentemente ou personalizado para o usu√°rio), o uso de <strong>getStaticProps</strong> √© mais eficiente, pois gera p√°ginas est√°ticas e proporciona uma performance melhor.
        </p>
      </div>

      <div style={container}>
        <div style={sectionTitle}>1. getStaticProps (Renderiza√ß√£o Est√°tica)</div>

        <p style={paragraph}>
          getStaticProps √© utilizado quando voc√™ deseja gerar uma p√°gina de forma est√°tica no momento da constru√ß√£o (build) do site.
          Ele permite que voc√™ pr√©-renderize p√°ginas com dados que n√£o mudam com frequ√™ncia. Usar getStaticProps √© √∫til para gerar p√°ginas de conte√∫do fixo ou quase fixo.
        </p>

        <p style={paragraph}><strong>Como usar:</strong></p>
        <p style={paragraph}>
          No caso da p√°gina de projetos, se as informa√ß√µes das metatags (como t√≠tulo, descri√ß√£o, etc.) s√£o est√°ticas ou mudam muito raramente, voc√™ pode usar getStaticProps.
        </p>

        <pre style={codeBlock}>
          {`import Head from "next/head";

const Projetos = ({ metadata }) => {
  return (
    <>
      <Head>
        <title>{metadata.title}</title>
        <meta name="description" content={metadata.description} />
        <meta property="og:title" content={metadata.ogTitle} />
        <meta property="og:description" content={metadata.ogDescription} />
        <meta property="og:image" content={metadata.ogImage} />
        <meta property="og:url" content={metadata.url} />
      </Head>
      <div style={{ display: "flex" }}>
        {/* Seu conte√∫do */}
      </div>
    </>
  );
};

// Usado para carregar dados no momento da constru√ß√£o (build)
export async function getStaticProps() {

  // Aqui voc√™ pode buscar dados de uma API, banco de dados ou usar valores fixos

  const metadata = {
    title: "Portf√≥lio de Desenvolvimento Web",
    description: "Descri√ß√£o do portf√≥lio",
    ogTitle: "Portf√≥lio de Desenvolvimento Web",
    ogDescription: "Descri√ß√£o do portf√≥lio",
    ogImage: "https://link-da-imagem.jpg",
    url: "https://meuportfolio.com/projetos",
  };

  return {
    props: { metadata }, // Passa os dados para o componente como props
  };
}

export default Projetos;`}
        </pre>

        <p style={paragraph}><strong>Vantagens de getStaticProps:</strong></p>
        <ul style={{ ...paragraph, paddingLeft: '20px' }}>
          <li>A p√°gina √© gerada apenas uma vez durante o build (n√£o h√° renderiza√ß√£o din√¢mica no momento de acesso).</li>
          <li>As p√°ginas s√£o extremamente r√°pidas para carregar, pois j√° est√£o geradas e prontas para serem entregues aos usu√°rios.</li>
        </ul>

        <p style={paragraph}><strong>Quando usar:</strong></p>
        <ul style={{ ...paragraph, paddingLeft: '20px' }}>
          <li>Quando o conte√∫do n√£o muda com frequ√™ncia (por exemplo, descri√ß√µes ou metatags fixas).</li>
          <li>Quando voc√™ n√£o precisa de dados que variam a cada solicita√ß√£o do usu√°rio.</li>
        </ul>
      </div>

      <div style={container}>
        <div style={sectionTitle}>1.1 Cen√°rios onde voc√™ usaria getStaticProps</div>

        <p style={paragraph}>
          Com getStaticProps:
        </p>

        <p style={paragraph}>
          Se o conte√∫do descritivo ou meta-informa√ß√µes (como o t√≠tulo, descri√ß√£o ou destaques do projeto) forem armazenados em um CMS (como Strapi ou Sanity) ou em uma API, voc√™ poderia usar getStaticProps para buscar os dados na build e construir a p√°gina.
        </p>

        <pre style={codeBlock}>
          {`export async function getStaticProps() {

  const response = await fetch("https://api.example.com/project-data");
  const projectData = await response.json();

  return {
    props: {
      projectData,
    },
    revalidate: 60, // Atualiza os dados a cada 60 segundos
  };
}`}
        </pre>
      </div>

      <div style={container}>
        <div style={sectionTitle}>2. getServerSideProps (Renderiza√ß√£o no Lado do Servidor)</div>

        <p style={paragraph}>
          getServerSideProps √© usado quando voc√™ precisa de dados din√¢micos que s√£o gerados a cada requisi√ß√£o, ou seja, sempre que a p√°gina for carregada. Isso √© √∫til se as metatags, por exemplo, dependerem de par√¢metros din√¢micos ou de dados que mudam frequentemente (como informa√ß√µes de usu√°rios ou dados em tempo real).
        </p>

        <p style={paragraph}><strong>Como usar:</strong></p>
        <p style={paragraph}>
          Se as informa√ß√µes das metatags ou o conte√∫do da p√°gina precisam ser din√¢micas e geradas a cada requisi√ß√£o (por exemplo, metatags personalizadas para cada usu√°rio ou p√°gina), use getServerSideProps.
        </p>

        <pre style={codeBlock}>
          {`import Head from "next/head";

const Projetos = ({ metadata }) => {

  return (
    <>
      <Head>
        <title>{metadata.title}</title>
        <meta name="description" content={metadata.description} />
        <meta property="og:title" content={metadata.ogTitle} />
        <meta property="og:description" content={metadata.ogDescription} />
        <meta property="og:image" content={metadata.ogImage} />
        <meta property="og:url" content={metadata.url} />
      </Head>

      <div style={{ display: "flex" }}>
        {/* Seu conte√∫do */}
      </div>
    </>
  );
};`}
        </pre>

        <pre style={codeBlock}>
          {`// Usado para carregar dados sempre que a p√°gina for acessada

export async function getServerSideProps() {

  // Aqui voc√™ pode buscar dados din√¢micos de uma API ou banco de dados

  const metadata = {
    title: "Portf√≥lio de Desenvolvimento Web",
    description: "Descri√ß√£o atualizada do portf√≥lio",
    ogTitle: "Portf√≥lio de Desenvolvimento Web",
    ogDescription: "Descri√ß√£o atualizada do portf√≥lio",
    ogImage: "https://link-da-imagem.jpg",
    url: "https://meuportfolio.com/projetos",
  };

  return {
    props: { metadata }, // Passa os dados para o componente como props
  };
}

export default Projetos;`}
        </pre>

        <p style={paragraph}><strong>Vantagens de getServerSideProps:</strong></p>
        <ul style={{ ...paragraph, paddingLeft: '20px' }}>
          <li>Gera conte√∫do din√¢mico sempre que a p√°gina √© acessada.</li>
          <li>Ideal para casos onde as informa√ß√µes podem mudar frequentemente e precisam ser sempre atualizadas.</li>
        </ul>

        <p style={paragraph}><strong>Quando usar:</strong></p>
        <ul style={{ ...paragraph, paddingLeft: '20px' }}>
          <li>Quando voc√™ precisa gerar conte√∫do din√¢mico, baseado em dados de um banco de dados ou API, em cada requisi√ß√£o.</li>
          <li>Para p√°ginas com conte√∫do que muda frequentemente e que n√£o pode ser gerado apenas na constru√ß√£o.</li>
        </ul>
      </div>

      <div style={container}>
        <div style={sectionTitle}>2.2 Cen√°rios onde voc√™ usaria getServerSideProps</div>

        <p style={paragraph}>
          Com getServerSideProps:
        </p>

        <p style={paragraph}>
          Caso o conte√∫do dependa de informa√ß√µes din√¢micas do usu√°rio ou precise de atualiza√ß√µes frequentes (exemplo: autentica√ß√£o ou par√¢metros din√¢micos na URL), voc√™ poderia usar getServerSideProps.
        </p>

        <pre style={codeBlock}>
          {`export async function getServerSideProps(context) {

  const { params, req } = context;
  const response = await fetch(\`https://api.example.com/data?id=\${params.id}\`, {
    headers: { Authorization: \`Bearer \${req.cookies.token}\` },
  });
  const data = await response.json();

  return {
    props: {
      data,
    },
  };
}`}
        </pre>
      </div>

      <div style={container}>
        <div style={sectionTitle}>
          <span style={check}>üìå</span> Resumo
        </div>

        <div>
          <div style={bold}>getStaticProps:</div>
          <p style={paragraph}>
            Ideal para dados est√°ticos ou que mudam raramente.
            <br />
            A p√°gina √© pr√©-gerada no build e pode ser entregue rapidamente aos usu√°rios.
          </p>
        </div>

        <div style={separator}></div>

        <div>
          <div style={bold}>getServerSideProps:</div>
          <p style={paragraph}>
            Ideal para dados din√¢micos que precisam ser atualizados a cada requisi√ß√£o.
            <br />
            A p√°gina √© gerada no servidor, a cada solicita√ß√£o, o que pode aumentar o tempo de resposta.
          </p>
        </div>

        <div style={separator}></div>

        <div>
          <div style={bold}>Resumo geral:</div>
          <p style={paragraph}>
            Se as metatags e os dados n√£o mudam frequentemente, use getStaticProps para gerar a p√°gina de forma est√°tica e mais r√°pida.
            <br />
            Se voc√™ precisa de dados que mudam frequentemente ou variam com base na requisi√ß√£o (como dados do usu√°rio ou par√¢metros din√¢micos), use getServerSideProps.
            <br />
            Isso ajudar√° a garantir que o conte√∫do do {'<head>'}, como as metatags, seja sempre gerado corretamente e otimizado para SEO.
          </p>
        </div>
      </div>
    </>
  );
};


export default FrontendTecnologiasNextjs;