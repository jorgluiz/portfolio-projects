import { Container, SectionTitle, Check, SubsectionTitle, ItemTitle, List, CodeBlockF0F0F0 } from "@/styles/globalStyles";

const BackendTecnologias = () => {

  return (
    <>
      <Container>
        <SectionTitle>
          <Check>‚úÖ</Check>
          Tecnologias-chave para Backend com JavaScript (Node.js)
        </SectionTitle>

        <ItemTitle>1. Runtime</ItemTitle>
        <List>
          <li>Node.js ‚Äì motor principal para execu√ß√£o do JavaScript no backend.</li>
        </List>

        <ItemTitle>2. Framework Web</ItemTitle>
        <List>
          <li>Express.js ‚Äì simples, flex√≠vel, ideal para APIs REST.</li>
          <li>Fastify ‚Äì alternativa mais r√°pida que Express, com suporte nativo a JSON Schema.</li>
          <li>NestJS ‚Äì estrutura modular baseada em TypeScript, com arquitetura inspirada no Angular.</li>
        </List>

        <ItemTitle>3. Banco de Dados</ItemTitle>
        <List>
          <li><strong>Relacional (SQL):</strong> PostgreSQL (usando knex.js, sequelize ou TypeORM)</li>
          <li><strong>N√£o relacional (NoSQL):</strong> MongoDB (com mongoose ou driver nativo)</li>
        </List>

        <ItemTitle>4. Autentica√ß√£o & Seguran√ßa</ItemTitle>
        <List>
          <li>JWT (token de autentica√ß√£o)</li>
          <li>bcrypt (hash seguro de senhas)</li>
          <li>helmet (seguran√ßa para headers HTTP)</li>
          <li>cors (controle de acesso externo √† API)</li>
        </List>

        <ItemTitle>5. Valida√ß√£o de Dados</ItemTitle>
        <List>
          <li>Joi (usado com Express)</li>
          <li>Zod (moderno, ideal com TypeScript)</li>
          <li>class-validator (usado com NestJS)</li>
        </List>

        <ItemTitle>6. Testes</ItemTitle>
        <List>
          <li>Jest ou Mocha + Chai (testes unit√°rios e de integra√ß√£o)</li>
          <li>Supertest (testes de endpoints HTTP)</li>
        </List>

        <ItemTitle>7. Deploy</ItemTitle>
        <List>
          <li>Docker (containeriza√ß√£o)</li>
          <li>PM2 (gerenciamento de processos)</li>
          <li>Nginx (proxy reverso)</li>
          <li>CI/CD: GitHub Actions, GitLab CI, etc.</li>
        </List>
      </Container>

      <Container>
        <SectionTitle>
          <Check>üß†</Check> Padr√µes Recomendados
        </SectionTitle>

        <List>
          <li><strong>MVC (Model-View-Controller)</strong> ‚Äì para APIs simples.</li>
          <li><strong>Service Layer Pattern</strong> ‚Äì separa regras de neg√≥cio da camada de controller.</li>
          <li><strong>Repository Pattern</strong> ‚Äì se estiver usando SQL, bom para abstrair acesso ao banco.</li>
          <li><strong>Hexagonal/Clean Architecture</strong> ‚Äì ideal para projetos escal√°veis e test√°veis.</li>
          <li><strong>Domain-Driven Design (DDD)</strong> ‚Äì se estiver construindo algo enterprise/grande.</li>
        </List>
      </Container>

      <Container>
        <SectionTitle>
          <Check>‚úÖ</Check> Estrutura Modular (Express.js como exemplo)
        </SectionTitle>

        <SubsectionTitle>bash</SubsectionTitle>

        <CodeBlockF0F0F0>
          {`/src
  /config        <- configs do app (env, db, etc)
  /controllers   <- l√≥gica dos endpoints
  /models        <- schemas ou modelos de dados
  /routes        <- define rotas e middlewares
  /services      <- regras de neg√≥cio (camada de servi√ßo)
  /middlewares   <- autentica√ß√£o, logger, etc.
  /utils         <- fun√ß√µes auxiliares
  /validators    <- valida√ß√£o de entrada
  /database      <- conex√£o com o banco
index.js         <- entrada da aplica√ß√£o`}
        </CodeBlockF0F0F0>
      </Container>
    </>
  );
};

export default BackendTecnologias;
